package ${rootPackage}.controller;

import com.github.pagehelper.PageInfo;
import com.github.pagehelper.util.StringUtil;
import ${rootPackage}.${packModel}.${tableBigCamel};
import ${rootPackage}.{packService}.${tableBigCamel}Service;
import ${rootPackage}.view.ResponseResult;
import ${rootPackage}.view.RestResultGenerator;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


 /**
  * @Description: ${tableComment} API
  * @Author: ${codeAuthor}
  * @Company ${codeCompany}
  * @CreateDate: ${now}
  * @Version : ${codeVersion}
  */
@Api(tags = "${tableComment}接口")
@RestController
@RequestMapping("/${moduleName}")
public class ${tableBigCamel}Controller{

    @Autowired
    private ${tableBigCamel}Service ${tableSmallCamel}Service;

    @ApiOperation("查询 所有 ${tableComment} 分页")
    @RequestMapping(value = "/${tableSmallCamel}s", method = RequestMethod.POST)
    public ResponseResult<PageInfo<${tableBigCamel}>> get${tableBigCamel}PageTurn(
            <#list columList as map>
            @ApiParam(value = "${map.columnComment} (非必传参数)") @RequestParam(required = false) ${map.columnType} ${map.columnSmallCamel},
            </#list>
            @ApiParam(value = "页码(必传)") @RequestParam Integer pageNo,
            @ApiParam(value = "每页显示多少数据(必传)") @RequestParam Integer pageSize) throws Exception {
        Map<String, Object> rs = new HashMap<String, Object>();
        <#list columList as map>
        <#switch  map.columnType>
        <#case "String">
        if (StringUtil.isNotEmpty(${map.columnSmallCamel})) {
           rs.put("${map.columnSmallCamel}", "%" + ${map.columnSmallCamel} + "%");
        }
        <#break>
        <#default>
        if (null != ${map.columnSmallCamel}) {
           rs.put("${map.columnSmallCamel}", ${map.columnSmallCamel});
        }
        </#switch>
        </#list>
        PageInfo<${tableBigCamel}> pageInfo = ${tableSmallCamel}Service.get${tableBigCamel}PageTurn(rs, pageNo, pageSize);
        return RestResultGenerator.genResult(pageInfo);
    }

    @ApiOperation("查询 所有 ${tableComment}")
    @RequestMapping(value = "/all${tableBigCamel}s", method = RequestMethod.POST)
    public ResponseResult<List<${tableBigCamel}>> select${tableBigCamel}List(
        <#list columList as map>
        @ApiParam(value = "${map.columnComment} (非必传参数)") @RequestParam(required = false) ${map.columnType} ${map.columnSmallCamel}<#if map_has_next>,</#if>
        </#list>
        )throws Exception {
        Map<String, Object> rs = new HashMap<String, Object>();
        <#list columList as map>
        <#switch  map.columnType>
        <#case "String">
         if (StringUtil.isNotEmpty(${map.columnSmallCamel})) {
            rs.put("${map.columnSmallCamel}", "%" + ${map.columnSmallCamel} + "%");
         }
         <#break>
         <#default>
        if (null != ${map.columnSmallCamel}) {
            rs.put("${map.columnSmallCamel}", ${map.columnSmallCamel});
        }
        </#switch>
        </#list>
        List<${tableBigCamel}> ${tableSmallCamel}List = ${tableSmallCamel}Service.select${tableBigCamel}List(rs);
        return RestResultGenerator.genResult(${tableSmallCamel}List);
    }

    @ApiOperation("新增 ${tableComment}")
    @RequestMapping(value = "/${tableSmallCamel}", method = RequestMethod.POST)
    public ResponseResult<String> add${tableBigCamel}(
            <#list columList as map>
                @ApiParam(value = "${map.columnComment} (非必传参数)") @RequestParam(required = false) ${map.columnType} ${map.columnSmallCamel}<#if map_has_next>,</#if>
            </#list>
            ) throws Exception {
        ${tableBigCamel} ${tableSmallCamel} = new ${tableBigCamel}();
        <#list columList as map>
        <#switch  map.columnType>
        <#case "String">
        if (StringUtil.isNotEmpty(${map.columnSmallCamel})) {
           ${tableSmallCamel}.set${map.columnBigCamel}(${map.columnSmallCamel});
        }
        <#break>
        <#default>
        if (null != ${map.columnSmallCamel}) {
            ${tableSmallCamel}.set${map.columnBigCamel}(${map.columnSmallCamel});
        }
        </#switch>
        </#list>
        //${tableSmallCamel}.setCreatedDate(new Date());
        ${tableSmallCamel}Service.add${tableBigCamel}(${tableSmallCamel});
        return RestResultGenerator.genResult("sucess");
    }

    @ApiOperation("更新 ${tableComment}")
    @RequestMapping(value = "/${tableSmallCamel}/{${tabPrikeySmallCamel}}", method = RequestMethod.PUT)
    public ResponseResult<String> update${tableBigCamel}ById(
            @ApiParam(value = "${tabPrikeyComment} (必传参数)") @PathVariable ${tabPrikeyType}  ${tabPrikeySmallCamel},
             <#list columList as map>
             @ApiParam(value = "${map.columnComment} (非必传参数)") @RequestParam(required = false) ${map.columnType} ${map.columnSmallCamel}<#if map_has_next>,</#if>
             </#list>
            ) throws Exception {
        ${tableBigCamel} ${tableSmallCamel} = new ${tableBigCamel}();
        ${tableSmallCamel}.set${tabPrikeyBigCamel}(${tabPrikeySmallCamel});

        <#list columList as map>
         <#switch  map.columnType>
         <#case "String">
         if (StringUtil.isNotEmpty(${map.columnSmallCamel})) {
            ${tableSmallCamel}.set${map.columnBigCamel}(${map.columnSmallCamel});
         }
         <#break>
         <#default>
         if (null != ${map.columnSmallCamel}) {
            ${tableSmallCamel}.set${map.columnBigCamel}(${map.columnSmallCamel});
         }
        </#switch>
        </#list>
        //${tableSmallCamel}.setModifiedDate(new Date());
        ${tableSmallCamel}Service.update${tableBigCamel}ById(${tableSmallCamel});
        return RestResultGenerator.genResult("sucess");
    }

    @ApiOperation("删除 ${tableComment}")
    @RequestMapping(value = "/${tableSmallCamel}/{${tabPrikeySmallCamel}}", method = RequestMethod.DELETE)
    public ResponseResult<String> del${tableBigCamel}ById(
             @ApiParam(value = "${tabPrikeyComment} (必传参数)") @PathVariable ${tabPrikeyType}  ${tabPrikeySmallCamel}
            ) throws Exception {
        ${tableSmallCamel}Service.del${tableBigCamel}ById(${tabPrikeySmallCamel});
        return RestResultGenerator.genResult("sucess");
    }

    @ApiOperation("查询 ${tableComment}")
    @RequestMapping(value = "/${tableSmallCamel}/{${tabPrikeySmallCamel}}", method = RequestMethod.GET)
    public ResponseResult<${tableBigCamel}> get${tableBigCamel}ById(
            @ApiParam(value = "${tabPrikeyComment} (必传参数)") @PathVariable ${tabPrikeyType}  ${tabPrikeySmallCamel}) throws Exception {
        return RestResultGenerator.genResult(${tableSmallCamel}Service.get${tableBigCamel}ById(${tabPrikeySmallCamel}));
    }
}

